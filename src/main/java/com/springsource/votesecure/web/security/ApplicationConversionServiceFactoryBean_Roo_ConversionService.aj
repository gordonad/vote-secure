// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.votesecure.web.security;

import com.springsource.votesecure.domain.Choice;
import com.springsource.votesecure.domain.Vote;
import com.springsource.votesecure.domain.security.Authorities;
import com.springsource.votesecure.domain.security.UserAuthority;
import com.springsource.votesecure.domain.security.Users;
import java.lang.String;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    Converter<UserAuthority, String> ApplicationConversionServiceFactoryBean.getUserAuthorityConverter() {
        return new Converter<UserAuthority, String>() {
            public String convert(UserAuthority source) {
                return new StringBuilder().append(source.toString()).toString();
            }
        };
    }
    
    Converter<Authorities, String> ApplicationConversionServiceFactoryBean.getAuthoritiesConverter() {
        return new Converter<Authorities, String>() {
            public String convert(Authorities source) {
                return new StringBuilder().append(source.getAuthority()).toString();
            }
        };
    }
    
    Converter<Choice, String> ApplicationConversionServiceFactoryBean.getChoiceConverter() {
        return new Converter<Choice, String>() {
            public String convert(Choice source) {
                return new StringBuilder().append(source.getNamingChoice()).append(" ").append(source.getDescription()).toString();
            }
        };
    }
    
    Converter<Vote, String> ApplicationConversionServiceFactoryBean.getVoteConverter() {
        return new Converter<Vote, String>() {
            public String convert(Vote source) {
                return new StringBuilder().append(source.getIp()).append(" ").append(source.getRegistered()).toString();
            }
        };
    }
    
    Converter<Users, String> ApplicationConversionServiceFactoryBean.getUsersConverter() {
        return new Converter<Users, String>() {
            public String convert(Users source) {
                return new StringBuilder().append(source.getPasswordAgain()).append(" ").append(source.getUsername()).append(" ").append(source.getPassword()).toString();
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getUserAuthorityConverter());
        registry.addConverter(getAuthoritiesConverter());
        registry.addConverter(getChoiceConverter());
        registry.addConverter(getVoteConverter());
        registry.addConverter(getUsersConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
