// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.votesecure.web;

import com.springsource.votesecure.domain.Choice;
import com.springsource.votesecure.domain.Vote;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect VoteController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String VoteController.create(@Valid Vote vote, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("vote", vote);
            addDateTimeFormatPatterns(model);
            return "votes/create";
        }
        vote.persist();
        return "redirect:/votes/" + encodeUrlPathSegment(vote.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String VoteController.createForm(Model model) {
        model.addAttribute("vote", new Vote());
        addDateTimeFormatPatterns(model);
        return "votes/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String VoteController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("vote", Vote.findVote(id));
        model.addAttribute("itemId", id);
        return "votes/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String VoteController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("votes", Vote.findVoteEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Vote.countVotes() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("votes", Vote.findAllVotes());
        }
        addDateTimeFormatPatterns(model);
        return "votes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String VoteController.update(@Valid Vote vote, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("vote", vote);
            addDateTimeFormatPatterns(model);
            return "votes/update";
        }
        vote.merge();
        return "redirect:/votes/" + encodeUrlPathSegment(vote.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String VoteController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("vote", Vote.findVote(id));
        addDateTimeFormatPatterns(model);
        return "votes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String VoteController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Vote.findVote(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/votes?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("choices")
    public Collection<Choice> VoteController.populateChoices() {
        return Choice.findAllChoices();
    }
    
    void VoteController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("vote_registered_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String VoteController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
