// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.votesecure.domain;

import com.springsource.votesecure.domain.Vote;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect VoteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VoteDataOnDemand: @Component;
    
    private Random VoteDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Vote> VoteDataOnDemand.data;
    
    public Vote VoteDataOnDemand.getNewTransientVote(int index) {
        com.springsource.votesecure.domain.Vote obj = new com.springsource.votesecure.domain.Vote();
        obj.setChoice(null);
        obj.setIp("ip_" + index);
        obj.setRegistered(new java.util.Date(new java.util.Date().getTime() - 10000000L));
        return obj;
    }
    
    public Vote VoteDataOnDemand.getSpecificVote(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Vote obj = data.get(index);
        return Vote.findVote(obj.getId());
    }
    
    public Vote VoteDataOnDemand.getRandomVote() {
        init();
        Vote obj = data.get(rnd.nextInt(data.size()));
        return Vote.findVote(obj.getId());
    }
    
    public boolean VoteDataOnDemand.modifyVote(Vote obj) {
        return false;
    }
    
    public void VoteDataOnDemand.init() {
        data = com.springsource.votesecure.domain.Vote.findVoteEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Vote' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.springsource.votesecure.domain.Vote>();
        for (int i = 0; i < 10; i++) {
            com.springsource.votesecure.domain.Vote obj = getNewTransientVote(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
