// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.votesecure.domain;

import com.springsource.votesecure.domain.Choice;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect ChoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ChoiceDataOnDemand: @Component;
    
    private Random ChoiceDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Choice> ChoiceDataOnDemand.data;
    
    public Choice ChoiceDataOnDemand.getNewTransientChoice(int index) {
        com.springsource.votesecure.domain.Choice obj = new com.springsource.votesecure.domain.Choice();
        java.lang.String namingChoice = "namingChoice_" + index;
        if (namingChoice.length() > 30) {
            namingChoice  = namingChoice.substring(0, 30);
        }
        obj.setNamingChoice(namingChoice);
        java.lang.String description = "description_" + index;
        if (description.length() > 80) {
            description  = description.substring(0, 80);
        }
        obj.setDescription(description);
        return obj;
    }
    
    public Choice ChoiceDataOnDemand.getSpecificChoice(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Choice obj = data.get(index);
        return Choice.findChoice(obj.getId());
    }
    
    public Choice ChoiceDataOnDemand.getRandomChoice() {
        init();
        Choice obj = data.get(rnd.nextInt(data.size()));
        return Choice.findChoice(obj.getId());
    }
    
    public boolean ChoiceDataOnDemand.modifyChoice(Choice obj) {
        return false;
    }
    
    public void ChoiceDataOnDemand.init() {
        data = com.springsource.votesecure.domain.Choice.findChoiceEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Choice' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.springsource.votesecure.domain.Choice>();
        for (int i = 0; i < 10; i++) {
            com.springsource.votesecure.domain.Choice obj = getNewTransientChoice(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
